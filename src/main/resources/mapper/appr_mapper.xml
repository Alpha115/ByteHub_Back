<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ApprDAO와 연결됩니다. -->
<mapper namespace="com.bytehub.approval.ApprDAO">

	<!-- 결재 문서 생성 -->
	<insert id="createAppr" parameterType="com.bytehub.approval.ApprDTO" useGeneratedKeys="true" keyProperty="appr_idx">
		INSERT INTO approval (writer_id, subject, content, appr_date, appr_type)
		VALUES (#{writer_id}, #{subject}, #{content}, #{appr_date}, #{appr_type})
	</insert>

    <!-- 첨부 파일 정보 저장 -->
    <insert id="insertFile" parameterType="com.bytehub.member.FileDTO">
        INSERT INTO file (ori_filename, new_filename, file_type, appr_idx)
        VALUES (#{ori_filename}, #{new_filename}, #{file_type}, #{appr_idx})
    </insert>

    <!-- 결재 문서별 첨부 파일 목록 조회 -->
    <select id="getFilesByApprIdx" resultType="com.bytehub.member.FileDTO">
        SELECT * FROM file WHERE appr_idx = #{appr_idx}
    </select>
    
    <!-- 파일 ID로 파일 정보 조회 -->
    <select id="getFileById" resultType="com.bytehub.member.FileDTO">
        SELECT * FROM file WHERE file_idx = #{file_idx}
    </select>
    
	<!-- 결재 이력 생성 -->
	<insert id="appr_checker" parameterType="map">
		INSERT INTO appr_history (appr_idx, step, lv_idx, checker_id, status, check_time, reason)
		VALUES (#{appr_idx}, #{step}, #{lv_idx}, #{checker_id}, #{status}, #{check_time}, #{reason})
	</insert>

	<!-- 결재 라인 조회 (기존 고정 결재 라인) -->
	<select id="getApprLine" resultType="com.bytehub.approval.ApprLineDTO">
		SELECT step, lv_idx, user_id FROM appr_line ORDER BY step ASC
	</select>

    <!-- 기안자의 lv_idx와 dept_idx를 받아 결재자 lv_idx 1,2(고정 1명), 3(같은 부서 팀장)만 반환 -->
    <select id="getDynamicApprLine" resultType="com.bytehub.approval.ApprLineDTO">
        SELECT 1 as step, l.lv_idx, m.user_id
        FROM level l
        JOIN member m ON l.lv_idx = m.lv_idx
        WHERE l.lv_idx = 1
        UNION ALL
        SELECT 2 as step, l.lv_idx, m.user_id
        FROM level l
        JOIN member m ON l.lv_idx = m.lv_idx
        WHERE l.lv_idx = 2
        UNION ALL
        SELECT 3 as step, l.lv_idx, m.user_id
        FROM level l
        JOIN member m ON l.lv_idx = m.lv_idx
        WHERE l.lv_idx = 3 AND m.dept_idx = #{writerDeptIdx}
        ORDER BY step ASC
    </select>

	<!-- 결재 상태 변경 (승인/반려) -->
	<update id="updateStatus" parameterType="map">
		UPDATE appr_history
		SET status = #{status},
			reason = #{reason},
			check_time = #{check_time}
		WHERE appr_his_idx = #{appr_his_idx}
	</update>

	<!-- 내가 작성한 결재 문서 목록 조회 -->
	<select id="getMyAppr" resultType="map">
		SELECT 
			a.*,
			CASE 
				WHEN EXISTS (SELECT 1 FROM appr_history h2 WHERE h2.appr_idx = a.appr_idx AND h2.status = '반려') THEN '반려'
				WHEN NOT EXISTS (SELECT 1 FROM appr_history h3 WHERE h3.appr_idx = a.appr_idx AND h3.status = '대기중') THEN '승인완료'
				ELSE '대기중'
			END as final_status,
			CASE 
				WHEN EXISTS (SELECT 1 FROM file f WHERE f.appr_idx = a.appr_idx) THEN '있음'
				ELSE '없음'
			END as has_files
		FROM approval a 
		WHERE a.writer_id = #{writer_id} 
		ORDER BY a.appr_date DESC
	</select>

    <!-- 내가 결재한 문서 이력 조회 -->
    <select id="getMyHistory" resultType="map">
        SELECT h.*, a.subject, a.writer_id, a.appr_date, a.appr_type,
               CASE 
                   WHEN EXISTS (SELECT 1 FROM file f WHERE f.appr_idx = a.appr_idx) THEN '있음'
                   ELSE '없음'
               END as has_files
        FROM appr_history h
        JOIN approval a ON h.appr_idx = a.appr_idx
        WHERE h.checker_id = #{checker_id}
        ORDER BY h.check_time DESC
    </select>

    <!-- 내가 결재할 문서 목록 조회 -->
    <select id="getToApproveList" resultType="map">
        SELECT 
            a.*,
            m.lv_idx as writer_lv_idx,
            m.dept_idx as writer_dept_idx,
            CASE 
                WHEN EXISTS (SELECT 1 FROM appr_history h2 WHERE h2.appr_idx = a.appr_idx AND h2.status = '반려') THEN '반려'
                WHEN NOT EXISTS (SELECT 1 FROM appr_history h3 WHERE h3.appr_idx = a.appr_idx AND h3.status = '대기중') THEN '승인완료'
                ELSE '대기중'
            END as final_status,
            CASE 
                WHEN EXISTS (SELECT 1 FROM file f WHERE f.appr_idx = a.appr_idx) THEN '있음'
                ELSE '없음'
            END as has_files
        FROM approval a 
        JOIN appr_history h ON a.appr_idx = h.appr_idx
        JOIN member m ON a.writer_id = m.user_id
        WHERE h.checker_id = #{user_id}
          AND h.status = '대기중'
          AND m.lv_idx > #{checker_lv_idx}
          AND (#{checker_lv_idx} != 3 OR m.dept_idx = #{checker_dept_idx})
        ORDER BY a.appr_date DESC
    </select>

    <!-- 전체 결재 문서 목록 조회 (관리자용) -->
    <select id="getAllApprovals" resultType="map">
        SELECT 
            a.*,
            m.lv_idx as writer_lv_idx,
            m.dept_idx as writer_dept_idx,
            CASE 
                WHEN EXISTS (SELECT 1 FROM appr_history h2 WHERE h2.appr_idx = a.appr_idx AND h2.status = '반려') THEN '반려'
                WHEN NOT EXISTS (SELECT 1 FROM appr_history h3 WHERE h3.appr_idx = a.appr_idx AND h3.status = '대기중') THEN '승인완료'
                ELSE '대기중'
            END as final_status,
            CASE 
                WHEN EXISTS (SELECT 1 FROM file f WHERE f.appr_idx = a.appr_idx) THEN '있음'
                ELSE '없음'
            END as has_files
        FROM approval a 
        JOIN member m ON a.writer_id = m.user_id
        <if test="checker_lv_idx != null and checker_dept_idx != null">
        WHERE (#{checker_lv_idx} != 3 OR m.dept_idx = #{checker_dept_idx})
        </if>
        ORDER BY a.appr_date DESC
    </select>

    <!-- 결재 문서 상세 정보 조회 -->
    <select id="getApprovalDetail" resultType="map">
        SELECT 
            a.*,
            CASE 
                WHEN EXISTS (SELECT 1 FROM appr_history h2 WHERE h2.appr_idx = a.appr_idx AND h2.status = '반려') THEN '반려'
                WHEN NOT EXISTS (SELECT 1 FROM appr_history h3 WHERE h3.appr_idx = a.appr_idx AND h3.status = '대기중') THEN '승인완료'
                ELSE '대기중'
            END as final_status
        FROM approval a 
        <if test="checker_lv_idx != null and checker_dept_idx != null">
        JOIN member m ON a.writer_id = m.user_id
        WHERE a.appr_idx = #{appr_idx}
          AND (#{checker_lv_idx} != 3 OR m.dept_idx = #{checker_dept_idx})
        </if>
        <if test="checker_lv_idx == null or checker_dept_idx == null">
        WHERE a.appr_idx = #{appr_idx}
        </if>
    </select>

    <!-- 결재 문서의 결재 이력 조회 -->
    <select id="getApprovalHistory" resultType="map">
        SELECT 
            h.*,
            l.lv_name as level_name,
            u.name as checker_name
        FROM appr_history h
        LEFT JOIN level l ON h.lv_idx = l.lv_idx
        LEFT JOIN member u ON h.checker_id = u.user_id
        WHERE h.appr_idx = #{appr_idx}
        ORDER BY h.step ASC
    </select>
    
    <!-- 신규 입사자 (입사 1년 미만) 대상 월차 생성  -->
	<insert id="monthlyLeave">
        INSERT INTO leave_history (writer_id, years, remain_days)
        SELECT 
            user_id,
            STR_TO_DATE(CONCAT(YEAR(CURDATE()), '-12-31'), '%Y-%m-%d') AS years,
            TIMESTAMPDIFF(MONTH, hire_date, DATE_FORMAT(CURDATE(), '%Y-12-31')) AS remain_days
        FROM member
        WHERE YEAR(hire_date) = YEAR(CURDATE())
          AND TIMESTAMPDIFF(MONTH, hire_date, CURDATE()) &lt; 12
          AND TIMESTAMPDIFF(YEAR, hire_date, CURDATE()) &lt; 1
          AND user_id NOT IN (
              SELECT writer_id FROM leave_history
              WHERE years = STR_TO_DATE(CONCAT(YEAR(CURDATE()), '-12-31'), '%Y-%m-%d')
          )
    </insert>

	
	<!-- 입사 1년 이상자 대상 연차 생성 -->
	<insert id="annualLeave">
        INSERT INTO leave_history (writer_id, years, remain_days)
        SELECT
            user_id,
            STR_TO_DATE(CONCAT(YEAR(CURDATE()), '-01-01'), '%Y-%m-%d') AS years,
            15 + TIMESTAMPDIFF(YEAR, hire_date, CURDATE()) - 1 AS remain_days
        FROM member
        WHERE TIMESTAMPDIFF(YEAR, hire_date, CURDATE()) >= 1
          AND user_id NOT IN (
              SELECT writer_id FROM leave_history
              WHERE years = STR_TO_DATE(CONCAT(YEAR(CURDATE()), '-01-01'), '%Y-%m-%d')
          )
    </insert>
    
    <!-- 개인 연차 조회 -->
    <select id="myLeave" resultType="com.bytehub.approval.LeaveHistoryDTO">
        SELECT * 
        FROM leave_history
        WHERE writer_id = #{writer_id}
        ORDER BY years DESC LIMIT 1
    </select>
    
    <!-- 연차 상세 내역 조회 -->
    <select id="leaveDetail" resultType="com.bytehub.approval.ApprDTO">
     SELECT ap.appr_idx, ap.writer_id, ap.checker_id, ap.subject, ap.content, ap.appr_date, ap.appr_type
     FROM approval ap
     JOIN appr_history ah ON ap.appr_idx = ah.appr_idx
     WHERE ap.writer_id = #{writer_id} AND ap.appr_type = '연차' AND ah.status = '승인완료'
     ORDER BY ap.appr_date DESC
    </select>
    
    <select id="getApprHistoryIdx" resultType="int">
    SELECT appr_idx FROM appr_history WHERE appr_his_idx = #{appr_his_idx}
	</select>
	
	<select id="getApprIdx" resultType="com.bytehub.approval.ApprDTO">
	    SELECT * FROM approval WHERE appr_idx = #{appr_idx}
	</select>
	
	<update id="minusLeave">
	    UPDATE leave_history
	    SET remain_days = remain_days - 1
	    WHERE writer_id = #{writer_id}
	      AND remain_days > 0
	    ORDER BY years DESC
	    LIMIT 1
	</update>

	<!-- 전체 사원 연차 현황 조회 -->
	<select id="getAllMembersLeave" resultType="map">
	    SELECT 
	        m.user_id as mem_idx,       
	        m.user_id,
	        m.name,
	        m.email,
	        m.hire_date,
	        IFNULL(d.dept_name, '미배정') as dept_name,
	        IFNULL(l.lv_name, '미배정') as level_name,
	        IFNULL(lh.remain_days, 0) as remain_days
	    FROM member m
	    LEFT JOIN department d ON m.dept_idx = d.dept_idx
	    LEFT JOIN level l ON m.lv_idx = l.lv_idx
	    LEFT JOIN leave_history lh ON m.user_id = lh.writer_id
	    WHERE m.status = '재직'
	    ORDER BY d.dept_name, m.name
	</select>
	
	<!-- 선택된 신규 입사자 (입사 1년 미만) 대상 월차 생성 -->
	<insert id="monthlyLeaveForSelected" parameterType="java.util.List">
        INSERT INTO leave_history (writer_id, years, remain_days)
        SELECT 
            user_id,
            STR_TO_DATE(CONCAT(YEAR(CURDATE()), '-12-31'), '%Y-%m-%d') AS years,
            TIMESTAMPDIFF(MONTH, hire_date, DATE_FORMAT(CURDATE(), '%Y-12-31')) AS remain_days
        FROM member
        WHERE user_id IN
          <foreach collection="list" item="userId" open="(" separator="," close=")">
              #{userId}
          </foreach>
          AND YEAR(hire_date) = YEAR(CURDATE())
          AND TIMESTAMPDIFF(MONTH, hire_date, CURDATE()) &lt; 12
          AND TIMESTAMPDIFF(YEAR, hire_date, CURDATE()) &lt; 1
          AND user_id NOT IN (
              SELECT writer_id FROM leave_history
              WHERE years = STR_TO_DATE(CONCAT(YEAR(CURDATE()), '-12-31'), '%Y-%m-%d')
          )
    </insert>
    
         <!-- 선택된 입사 1년 이상자 대상 연차 생성 -->
	<insert id="annualLeaveForSelected" parameterType="java.util.List">
        INSERT INTO leave_history (writer_id, years, remain_days)
        SELECT
            user_id,
            STR_TO_DATE(CONCAT(YEAR(CURDATE()), '-01-01'), '%Y-%m-%d') AS years,
            15 + TIMESTAMPDIFF(YEAR, hire_date, CURDATE()) - 1 AS remain_days
        FROM member
        WHERE user_id IN
          <foreach collection="list" item="userId" open="(" separator="," close=")">
              #{userId}
          </foreach>
          AND TIMESTAMPDIFF(YEAR, hire_date, CURDATE()) >= 1
          AND user_id NOT IN (
              SELECT writer_id FROM leave_history
              WHERE years = STR_TO_DATE(CONCAT(YEAR(CURDATE()), '-01-01'), '%Y-%m-%d')
          )
    </insert>

	
</mapper>