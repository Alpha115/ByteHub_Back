<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ApprDAO와 연결됩니다. -->
<mapper namespace="com.bytehub.approval.ApprDAO">

	<insert id="createAppr" parameterType="com.bytehub.approval.ApprDTO" useGeneratedKeys="true" keyProperty="appr_idx">
		INSERT INTO approval (writer_id, subject, content, appr_date, appr_type)
		VALUES (#{writer_id}, #{subject}, #{content}, #{appr_date}, #{appr_type})
	</insert>

	<insert id="appr_checker" parameterType="map">
		INSERT INTO appr_history (appr_idx, step, lv_idx, checker_id, status, check_time, reason)
		VALUES (#{appr_idx}, #{step}, #{lv_idx}, #{checker_id}, #{status}, #{check_time}, #{reason})
	</insert>

	<select id="getApprLine" resultType="com.bytehub.approval.ApprLineDTO">
		SELECT step, lv_idx, user_id FROM appr_line ORDER BY step ASC
	</select>

	<update id="updateStatus" parameterType="map">
		UPDATE appr_history
		SET status = #{status},
			reason = #{reason},
			check_time = #{check_time}
		WHERE appr_his_idx = #{appr_his_idx}
	</update>

	<select id="getMyAppr" resultType="map">
		SELECT 
			a.*,
			CASE 
				WHEN EXISTS (SELECT 1 FROM appr_history h2 WHERE h2.appr_idx = a.appr_idx AND h2.status = '반려') THEN '반려'
				WHEN NOT EXISTS (SELECT 1 FROM appr_history h3 WHERE h3.appr_idx = a.appr_idx AND h3.status = '대기중') THEN '승인완료'
				ELSE '대기중'
			END as final_status
		FROM approval a 
		WHERE a.writer_id = #{writer_id} 
		ORDER BY a.appr_date DESC
	</select>

    <select id="getMyHistory" resultType="map">
        SELECT h.*, a.subject, a.writer_id, a.appr_date, a.appr_type
        FROM appr_history h
        JOIN approval a ON h.appr_idx = a.appr_idx
        WHERE h.checker_id = #{checker_id}
        ORDER BY h.check_time DESC
    </select>

    <select id="getAllApprovals" resultType="map">
        SELECT 
            a.*,
            CASE 
                WHEN EXISTS (SELECT 1 FROM appr_history h2 WHERE h2.appr_idx = a.appr_idx AND h2.status = '반려') THEN '반려'
                WHEN NOT EXISTS (SELECT 1 FROM appr_history h3 WHERE h3.appr_idx = a.appr_idx AND h3.status = '대기중') THEN '승인완료'
                ELSE '대기중'
            END as final_status
        FROM approval a 
        ORDER BY a.appr_date DESC
    </select>

    <select id="getApprovalDetail" resultType="map">
        SELECT 
            a.*,
            CASE 
                WHEN EXISTS (SELECT 1 FROM appr_history h2 WHERE h2.appr_idx = a.appr_idx AND h2.status = '반려') THEN '반려'
                WHEN NOT EXISTS (SELECT 1 FROM appr_history h3 WHERE h3.appr_idx = a.appr_idx AND h3.status = '대기중') THEN '승인완료'
                ELSE '대기중'
            END as final_status
        FROM approval a 
        WHERE a.appr_idx = #{appr_idx}
    </select>

    <select id="getApprovalHistory" resultType="map">
        SELECT 
            h.*,
            l.lv_name as level_name,
            u.name as checker_name
        FROM appr_history h
        LEFT JOIN level l ON h.lv_idx = l.lv_idx
        LEFT JOIN member u ON h.checker_id = u.user_id
        WHERE h.appr_idx = #{appr_idx}
        ORDER BY h.step ASC
    </select>
    
    <!-- 신규 입사자 (입사 1년 미만) 대상 월차 생성  -->
	<insert id="monthlyLeave">
        INSERT INTO leave_history (writer_id, years, remain_days)
        SELECT 
            user_id,
            STR_TO_DATE(CONCAT(YEAR(CURDATE()), '-12-31'), '%Y-%m-%d') AS years,
            TIMESTAMPDIFF(MONTH, hire_date, DATE_FORMAT(CURDATE(), '%Y-12-31')) AS remain_days
        FROM member
        WHERE YEAR(hire_date) = YEAR(CURDATE())
          AND TIMESTAMPDIFF(MONTH, hire_date, CURDATE()) &lt; 12
          AND TIMESTAMPDIFF(YEAR, hire_date, CURDATE()) &lt; 1
          AND user_id NOT IN (
              SELECT writer_id FROM leave_history
              WHERE years = STR_TO_DATE(CONCAT(YEAR(CURDATE()), '-12-31'), '%Y-%m-%d')
          )
    </insert>

	
	<!-- 입사 1년 이상자 대상 연차 생성 -->
	<insert id="annualLeave">
        INSERT INTO leave_history (writer_id, years, remain_days)
        SELECT
            user_id,
            STR_TO_DATE(CONCAT(YEAR(CURDATE()), '-01-01'), '%Y-%m-%d') AS years,
            15 + TIMESTAMPDIFF(YEAR, hire_date, CURDATE()) - 1 AS remain_days
        FROM member
        WHERE TIMESTAMPDIFF(YEAR, hire_date, CURDATE()) >= 1
          AND user_id NOT IN (
              SELECT writer_id FROM leave_history
              WHERE years = STR_TO_DATE(CONCAT(YEAR(CURDATE()), '-01-01'), '%Y-%m-%d')
          )
    </insert>
    
    <!-- 개인 연차 조회 -->
    <select id="myLeave" resultType="com.bytehub.approval.LeaveHistoryDTO">
        SELECT * 
        FROM leave_history
        WHERE writer_id = #{writer_id}
        ORDER BY years DESC LIMIT 1
    </select>
	
</mapper>